{"version":3,"sources":["recipe.js"],"names":["Recipe","req","res","query","sort","order","recipe1","recipe2","upvotes","status","send","feed","push","id","length","meal","body","ingredients","description","message","slice","i","params","recipeid","parseInt","counter"],"mappings":"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","file":"recipe.js","sourceRoot":"C:/Users/lion/Documents/GitHub/recipes/server/controller","sourcesContent":["import recipe from  '../model/recipe';\r\n\r\nclass Recipe {\r\n    \r\n    static getRecipes (req, res) {\r\n//        checks url for sort=upvotes  & order=desc\r\n        if(req.query.sort == \"upvotes\"){\r\n            if (req.query.order == 'desc') {\r\n                recipe.sort((recipe1, recipe2) => recipe1.upvotes - recipe2.upvotes);\r\n            }\r\n        }else{\r\n            recipe.sort((recipe1, recipe2) => recipe1 - recipe2);\r\n        } \r\n        return res.status(201).send({status: true, feed: recipe });\r\n    }\r\n\r\n    \r\n    static createRecipe (req, res) {\r\n        //push new record to dummy storage\r\n        recipe.push({\r\n//            increments id by 1 to its current length\r\n            id: recipe.length + 1,\r\n//            attachs body of message to specified appropriate key in dummy data\r\n            meal: req.body.meal,\r\n            ingredients: req.body.ingredients,\r\n            description: req.body.description\r\n        });\r\n        //return successful message\r\n        return res.status(200).send({ status: true + \": Record Inserted!!!\", message: recipe.slice(-1) });\r\n    }\r\n    \r\n    static updateRecipe (req, res) {\r\n        for(let i = 0; i <= recipe.length; i += 1){\r\n//            check if selected id = provided id\r\n            if(recipe[i].id == req.params.recipeid) {\r\n                    recipe[i].meal = req.body.meal;\r\n                    recipe[i].ingredients = req.body.ingredients;\r\n                    recipe[i].description = req.body.description;\r\n                \r\n                    return res.status(200).send({ status: true + \": Record Updated!!!\", message: recipe[i] });    \r\n            }\r\n        }\r\n    }\r\n    \r\n//    not working\r\n    static deleteRecipe (req, res) {\r\n        for(let i = 0; i <= recipe.length; i += 1){\r\n            if(recipe[i].id == parseInt(req.params.recipeid, 10)) {\r\n                    recipe.slice(i, 1);\r\n                    return res.status(200).send({ status: true + \": Record Deleted!!!\", message: recipe[i] });    \r\n            }\r\n        }\r\n    }\r\n    \r\n    \r\n//    not working\r\n    static upVote(req, res) {\r\n    for (let i = 0; i <= recipe.length; i += 1) {\r\n      if (recipe[i].id == req.params.recipeid) {\r\n        const counter = parseInt(req.body.upvotes, 10);\r\n        recipe[i].upvotes += counter;\r\n        return res.status(201).send({ status: 'Success.', message: 'Upvote successful.' });\r\n      }\r\n    }\r\n  }\r\n\r\n}\r\n\r\nexport default Recipe;"]}